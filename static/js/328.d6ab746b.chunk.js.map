{"version":3,"file":"static/js/328.d6ab746b.chunk.js","mappings":"4TAGMA,EAAU,gCACVC,EAAM,2CAECC,EAAU,mCAAG,WAAOC,GAAP,iGAECC,EAAAA,EAAAA,GAAM,GAAD,OACvBJ,EADuB,6BACKC,GAAOE,GAHlB,eAKQE,KAHxBC,EAFgB,QAKTC,KAAKC,QALI,sBAMd,IAAIC,MAAM,sDANI,gCAQfH,EAASC,KAAKC,SARC,uCAUtBE,EAAAA,GAAAA,MAAY,KAAMC,SAVI,kBAWf,IAXe,yDAAH,sDAeVC,EAAiB,mCAAG,WAAOC,GAAP,iGAENT,EAAAA,EAAAA,GAAM,GAAD,OACvBJ,EADuB,wBACAC,EADA,yBACoBY,IAHnB,eAKCR,KAHxBC,EAFuB,QAKhBC,KAAKC,QALW,sBAMrB,IAAIC,MAAM,sDANW,gCAQtBH,EAASC,KAAKC,SARQ,uCAU7BE,EAAAA,GAAAA,MAAA,MAV6B,kBAWtB,IAXsB,yDAAH,sDAejBI,EAAe,mCAAG,WAAOC,GAAP,iGAEJX,EAAAA,EAAAA,GAAM,GAAD,OACvBJ,EADuB,iBACPe,EADO,YACDd,IAHA,eAKLI,KAHhBC,EAFqB,QAKdC,KALc,sBAMnB,IAAIE,MAAM,sDANS,gCAQpBH,EAASC,MARW,gCAU3BG,EAAAA,GAAAA,MAAA,MAV2B,yDAAH,sDAcfM,EAAU,mCAAG,WAAOD,GAAP,iGAECX,EAAAA,EAAAA,GAAM,GAAD,OACvBJ,EADuB,iBACPe,EADO,oBACOd,IAHb,eAKKI,KAHrBC,EAFgB,QAKTC,KAAKU,KALI,sBAMd,IAAIR,MAAM,sDANI,gCAQfH,EAASC,KAAKU,MARC,uCAUtBP,EAAAA,GAAAA,MAAA,MAVsB,kBAWf,IAXe,yDAAH,sDAeVQ,EAAW,mCAAG,WAAOH,GAAP,iGAEAX,EAAAA,EAAAA,GAAM,GAAD,OACvBJ,EADuB,iBACPe,EADO,oBACOd,IAHZ,eAKOI,KAHxBC,EAFiB,QAKVC,KAAKC,QALK,sBAMf,IAAIC,MAAM,sDANK,gCAQhBH,EAASC,KAAKC,SARE,uCAUvBE,EAAAA,GAAAA,MAAA,MAVuB,kBAWhB,IAXgB,yDAAH,qD,uDCjEjB,IAAMS,EAAsB,SAAAC,GAGjC,IAFA,IAAIC,EAAkB,GAChBC,EAAYF,EAAIG,KAAI,SAAAC,GAAI,OAAIA,EAAKT,EAAT,IACrBU,EAAI,EAAGA,EAAIH,EAAUI,OAAQD,IACpC,IAAK,IAAIE,EAAI,EAAGA,EAAIL,EAAUI,OAAQC,IAChCF,EAAIE,GAAKL,EAAUG,KAAOH,EAAUK,KACjCN,EAAgBO,SAASD,IAC5BN,EAAgBQ,KAAKF,IAM7B,OADeP,EAAIU,QAAO,SAACN,EAAMO,GAAP,OAAgBV,EAAgBO,SAASG,EAAzC,GAE3B,C,4KCZYC,E,QAASC,GAAAA,GAAH,sI,SC0DnB,EAnDa,WACX,OAAkCC,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACMC,GAAWC,EAAAA,EAAAA,MAWjB,OATAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,mCAAG,qGACExB,EAAAA,EAAAA,IAAWqB,EAASI,OADtB,OACbC,EADa,OAEjBA,GAASvB,EAAAA,EAAAA,GAAoBuB,GAC7BN,EAAaM,GAHI,2CAAH,qDAKhBF,GACD,GAAE,CAACH,KAGF,8BACwB,IAArBF,EAAUT,QACT,iGAIA,wBACGS,EAAUZ,KACT,gBACER,EADF,EACEA,GACA4B,EAFF,EAEEA,aAFF,IAGEC,KAAAA,OAHF,MAGS,gBAHT,MAIEC,UAAAA,OAJF,MAIc,gBAJd,SAME,UAACb,EAAD,YACE,0BACE,gBACEc,IACEH,EAAY,UAlCb,oCAkCa,OAAqBA,GAAiBI,EAEpDC,IAAKJ,EACLK,MAAM,WAGV,4BACE,2CAAmBL,MACnB,uCAAeC,UAZN9B,EANf,OA2BX,C","sources":["axiosAPI/axios.js","filterFuncToArrById/filterFuncToArrById.js","pages/Cast/Cast.styled.js","pages/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\nimport toast from 'react-hot-toast';\n\nconst baseURL = 'https://api.themoviedb.org/3/';\nconst KEY = 'api_key=6e7eaf256e2890a0f83bf0d8fe3fe4d9'\n\nexport const trendQuery = async (abort) => {\n  try {\n    const response = await axios(\n      `${baseURL}trending/all/week?${KEY}`, abort\n    );\n    if (response.data.results === undefined) {      \n      throw new Error(\"Request failed!!! Probably no internet connection!\");\n    }\n    return response.data.results;\n  } catch (error) {\n    toast.error(error.message);\n    return [];\n  }\n};\n\nexport const findFilmByKeyword = async (keyword) => {\n  try {\n    const response = await axios(\n      `${baseURL}search/movie?${KEY}&page=1&query=${keyword}`\n    );\n    if (response.data.results === undefined) {      \n      throw new Error(\"Request failed!!! Probably no internet connection!\");\n    }\n    return response.data.results;\n  } catch (error) {\n    toast.error(error);\n    return [];\n  }\n};\n\nexport const findFilmDetails = async (id) => {\n  try {\n    const response = await axios(\n      `${baseURL}movie/${id}?${KEY}`\n    );\n    if (response.data === undefined) {      \n      throw new Error(\"Request failed!!! Probably no internet connection!\");\n    }\n    return response.data;\n  } catch (error) {\n    toast.error(error);\n  }\n};\n\nexport const findActors = async (id) => {\n  try {\n    const response = await axios(\n      `${baseURL}movie/${id}/credits?${KEY}`\n    );\n    if (response.data.cast === undefined) {      \n      throw new Error(\"Request failed!!! Probably no internet connection!\");\n    }\n    return response.data.cast;\n  } catch (error) {\n    toast.error(error);\n    return [];\n  }\n};\n\nexport const findReviews = async (id) => {\n  try {\n    const response = await axios(\n      `${baseURL}movie/${id}/reviews?${KEY}`\n    );\n    if (response.data.results === undefined) {      \n      throw new Error(\"Request failed!!! Probably no internet connection!\");\n    }\n    return response.data.results;\n  } catch (error) {\n    toast.error(error);\n    return [];\n  }\n};","export const filterFuncToArrById = arr => {\n  let repetitionIndex = [];\n  const reviewIds = arr.map(item => item.id);\n  for (let i = 0; i < reviewIds.length; i++) {\n    for (let j = 1; j < reviewIds.length; j++) {\n      if (i < j && reviewIds[i] === reviewIds[j]) {\n        if (!repetitionIndex.includes(j)) {\n          repetitionIndex.push(j);\n        }\n      } \n    }\n  }\n  const output = arr.filter((item, idx) => !repetitionIndex.includes(idx));\n  return output;\n};\n","import styled from \"styled-components\";\n\nexport const CastLi = styled.li`\ndisplay: flex;\ngap: 20px;\njustify-content: start;\nalign-items: center;\n  border-bottom: grey 1px dashed;\n`;","import { useState, useEffect } from 'react';\nimport { findActors } from 'axiosAPI/axios';\nimport { useLocation } from 'react-router-dom';\nimport { filterFuncToArrById } from 'filterFuncToArrById/filterFuncToArrById';\nimport noPhoto from '../../images/pic.jpeg';\nimport { CastLi } from './Cast.styled';\n\nconst baseImageURL = 'https://image.tmdb.org/t/p/w500/';\n\nconst Cast = () => {\n  const [actorList, setActorList] = useState([]);\n  const location = useLocation();\n\n  useEffect(() => {\n    const showActors = async () => {\n      let actors = await findActors(location.state);\n      actors = filterFuncToArrById(actors);\n      setActorList(actors);\n    };\n    showActors();\n  }, [location]);\n\n  return (\n    <>\n      {actorList.length === 0 ? (\n        <h3>\n          There is no information about the cast of the film in the database!\n        </h3>\n      ) : (\n        <ul>\n          {actorList.map(\n            ({\n              id,\n              profile_path,\n              name = 'Not available',\n              character = 'Not available',\n            }) => (\n              <CastLi key={id}>\n                <div>\n                  <img\n                    src={\n                      profile_path ? `${baseImageURL}${profile_path}` : noPhoto\n                    }\n                    alt={name}\n                    width=\"250\"\n                  />\n                </div>\n                <div>\n                  <h3>Actor's name: {name}</h3>\n                  <p>Character: {character}</p>\n                </div>                \n              </CastLi>\n            )\n          )}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n"],"names":["baseURL","KEY","trendQuery","abort","axios","undefined","response","data","results","Error","toast","message","findFilmByKeyword","keyword","findFilmDetails","id","findActors","cast","findReviews","filterFuncToArrById","arr","repetitionIndex","reviewIds","map","item","i","length","j","includes","push","filter","idx","CastLi","styled","useState","actorList","setActorList","location","useLocation","useEffect","showActors","state","actors","profile_path","name","character","src","noPhoto","alt","width"],"sourceRoot":""}