{"version":3,"file":"static/js/387.5e55e013.chunk.js","mappings":"kRAEaA,E,QAASC,GAAAA,GAAH,sI,SCyDnB,EAlDa,SAAC,GAAY,IAAVC,EAAS,EAATA,GACd,GAAkCC,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KAWA,OATAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,mCAAG,qGACEC,EAAAA,EAAAA,IAAWN,GADb,OACbO,EADa,OAEjBA,GAASC,EAAAA,EAAAA,GAAoBD,GAC7BJ,EAAaI,GAHI,2CAAH,qDAKhBF,GACD,GAAE,CAACL,KAGF,8BACwB,IAArBE,EAAUO,QACT,iGAIA,wBACGP,EAAUQ,KACT,gBACEV,EADF,EACEA,GACAW,EAFF,EAEEA,aAFF,IAGEC,KAAAA,OAHF,MAGS,gBAHT,MAIEC,UAAAA,OAJF,MAIc,gBAJd,SAME,UAACf,EAAD,YACE,0BACE,gBACEgB,IACEH,EAAY,UAjCb,oCAiCa,OAAqBA,GAAiBI,EAEpDC,IAAKJ,EACLK,MAAM,WAGV,4BACE,2CAAmBL,MACnB,uCAAeC,UAZNb,EANf,OA2BX,C,uDCzDM,IAAMQ,EAAsB,SAAAU,GAGjC,IAFA,IAAIC,EAAkB,GAChBC,EAAYF,EAAIR,KAAI,SAAAW,GAAI,OAAIA,EAAKrB,EAAT,IACrBsB,EAAI,EAAGA,EAAIF,EAAUX,OAAQa,IACpC,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAUX,OAAQc,IAChCD,EAAIC,GAAKH,EAAUE,KAAOF,EAAUG,KACjCJ,EAAgBK,SAASD,IAC5BJ,EAAgBM,KAAKF,IAM7B,OADeL,EAAIQ,QAAO,SAACL,EAAMM,GAAP,OAAgBR,EAAgBK,SAASG,EAAzC,GAE3B,C","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","filterFuncToArrById/filterFuncToArrById.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const CastLi = styled.li`\ndisplay: flex;\ngap: 20px;\njustify-content: start;\nalign-items: center;\n  border-bottom: grey 1px dashed;\n`;","import { useState, useEffect } from 'react';\nimport { findActors } from 'axiosAPI/axios';\nimport PropTypes from 'prop-types';\nimport { filterFuncToArrById } from 'filterFuncToArrById/filterFuncToArrById';\nimport noPhoto from '../../images/pic.jpeg';\nimport { CastLi } from './Cast.styled';\n\nconst baseImageURL = 'https://image.tmdb.org/t/p/w500/';\n\nconst Cast = ({ id }) => {\n  const [actorList, setActorList] = useState([]);\n\n  useEffect(() => {\n    const showActors = async () => {\n      let actors = await findActors(id);\n      actors = filterFuncToArrById(actors);\n      setActorList(actors);\n    };\n    showActors();\n  }, [id]);\n\n  return (\n    <>\n      {actorList.length === 0 ? (\n        <h3>\n          There is no information about the cast of the film in the database!\n        </h3>\n      ) : (\n        <ul>\n          {actorList.map(\n            ({\n              id,\n              profile_path,\n              name = 'Not available',\n              character = 'Not available',\n            }) => (\n              <CastLi key={id}>\n                <div>\n                  <img\n                    src={\n                      profile_path ? `${baseImageURL}${profile_path}` : noPhoto\n                    }\n                    alt={name}\n                    width=\"250\"\n                  />\n                </div>\n                <div>\n                  <h3>Actor's name: {name}</h3>\n                  <p>Character: {character}</p>\n                </div>                \n              </CastLi>\n            )\n          )}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n\nCast.propTypes = {\n  id: PropTypes.string.isRequired,\n}\n","export const filterFuncToArrById = arr => {\n  let repetitionIndex = [];\n  const reviewIds = arr.map(item => item.id);\n  for (let i = 0; i < reviewIds.length; i++) {\n    for (let j = 1; j < reviewIds.length; j++) {\n      if (i < j && reviewIds[i] === reviewIds[j]) {\n        if (!repetitionIndex.includes(j)) {\n          repetitionIndex.push(j);\n        }\n      } \n    }\n  }\n  const output = arr.filter((item, idx) => !repetitionIndex.includes(idx));\n  return output;\n};\n"],"names":["CastLi","styled","id","useState","actorList","setActorList","useEffect","showActors","findActors","actors","filterFuncToArrById","length","map","profile_path","name","character","src","noPhoto","alt","width","arr","repetitionIndex","reviewIds","item","i","j","includes","push","filter","idx"],"sourceRoot":""}